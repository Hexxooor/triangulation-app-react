# 🚀 Triangulation App - CI/CD Pipeline
# Automatisierte Tests, Builds und Deployments

name: 🎯 Triangulation App CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  # =============================================================================
  # FRONTEND TESTS
  # =============================================================================
  test-frontend:
    name: 🔧 Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🧪 Run Frontend Tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false --ci
      
      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
      
      - name: 🏧️ Build Frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: 📁 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # =============================================================================
  # BACKEND TESTS
  # =============================================================================
  test-backend:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: 📦 Install Backend Dependencies
        working-directory: ./backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black
      
      - name: 🎨 Code Formatting Check
        working-directory: ./backend
        run: black --check --line-length 100 .
      
      - name: 📝 Linting Check
        working-directory: ./backend
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: 🧪 Run Backend Tests
        working-directory: ./backend
        run: |
          # Erstelle Test-Datei falls nicht vorhanden
          if [ ! -f test_app.py ]; then
            cat > test_app.py << 'EOF'
          import pytest
          from app import app
          
          @pytest.fixture
          def client():
              app.config['TESTING'] = True
              with app.test_client() as client:
                  yield client
          
          def test_health_check(client):
              rv = client.get('/api/health')
              assert rv.status_code == 200
              assert b'healthy' in rv.data
          
          def test_triangulate_endpoint(client):
              test_data = {
                  'points': [
                      {'lat': 52.5200, 'lng': 13.4050, 'distance': 1000},
                      {'lat': 52.5300, 'lng': 13.4150, 'distance': 1500},
                      {'lat': 52.5100, 'lng': 13.4250, 'distance': 800}
                  ]
              }
              rv = client.post('/api/triangulate', json=test_data)
              assert rv.status_code == 200
          EOF
          fi
          pytest --cov=. --cov-report=xml --cov-report=html
      
      - name: 📊 Upload Backend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # =============================================================================
  # DOCKER BUILD & SECURITY SCAN
  # =============================================================================
  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📊 Extract Metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 📊 Extract Metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏧️ Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🏧️ Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🔍 Run Trivy Vulnerability Scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
      
      - name: 🔍 Run Trivy Vulnerability Scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
      
      - name: 📋 Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'
      
      - name: 📋 Upload Trivy Scan Results (Backend)
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-test:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐳 Start Application Stack
        run: |
          # Verwende die gebauten Images aus der Registry
          export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
          export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest"
          
          # Starte mit docker-compose
          docker-compose up -d
          
          # Warte auf Services
          echo "Warte auf Services..."
          sleep 30
      
      - name: 🔍 Health Checks
        run: |
          # Frontend Health Check
          curl -f http://localhost:3000/health || exit 1
          echo "✅ Frontend healthy"
          
          # Backend Health Check
          curl -f http://localhost:5000/api/health || exit 1
          echo "✅ Backend healthy"
      
      - name: 🧪 API Integration Tests
        run: |
          # Test Triangulation API
          RESPONSE=$(curl -s -X POST http://localhost:5000/api/triangulate \
            -H "Content-Type: application/json" \
            -d '{
              "points": [
                {"lat": 52.5200, "lng": 13.4050, "distance": 1000},
                {"lat": 52.5300, "lng": 13.4150, "distance": 1500},
                {"lat": 52.5100, "lng": 13.4250, "distance": 800}
              ]
            }')
          
          # Check if response contains expected fields
          echo "$RESPONSE" | jq -e '.lat and .lng and .accuracy' || exit 1
          echo "✅ Triangulation API working"
      
      - name: 🧩 Cleanup
        if: always()
        run: docker-compose down -v

  # =============================================================================
  # RENDER.COM DEPLOYMENT NOTIFICATION
  # =============================================================================
  notify-render:
    name: 🌐 Notify Render.com
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 🚀 Deployment Success
        run: |
          echo "🎉 GitHub CI/CD Pipeline erfolgreich!"
          echo ""
          echo "🌐 Render.com Deployment:"
          echo "Frontend: https://triangulation-frontend.onrender.com"
          echo "Backend:  https://triangulation-backend.onrender.com"
          echo ""
          echo "📊 Features verfügbar:"
          echo "- 🎯 Triangulation mit Drag & Drop"
          echo "- 📍 GPS-Integration"
          echo "- 📱 Mobile-optimiert"
          echo "- 🔧 Genauigkeitseinstellungen"