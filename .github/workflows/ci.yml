# üöÄ Triangulation App - CI/CD Pipeline
# Automatisierte Tests, Builds und Deployments

name: üéØ Triangulation App CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  # =============================================================================
  # FRONTEND TESTS
  # =============================================================================
  test-frontend:
    name: üîß Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: üì¶ Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: üß™ Run Frontend Tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false --ci
      
      - name: üìä Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
      
<<<<<<< HEAD
      - name: üèßÔ∏è Build Frontend
=======
      - name: üèóÔ∏è Build Frontend
>>>>>>> 4a542fb (f)
        working-directory: ./frontend
        run: npm run build
      
      - name: üìÅ Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # =============================================================================
  # BACKEND TESTS
  # =============================================================================
  test-backend:
    name: üîß Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: üì¶ Install Backend Dependencies
        working-directory: ./backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black
      
      - name: üé® Code Formatting Check
        working-directory: ./backend
        run: black --check --line-length 100 .
      
      - name: üìù Linting Check
        working-directory: ./backend
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: üß™ Run Backend Tests
        working-directory: ./backend
        run: |
          # Erstelle Test-Datei falls nicht vorhanden
          if [ ! -f test_app.py ]; then
            cat > test_app.py << 'EOF'
          import pytest
          from app import app
          
          @pytest.fixture
          def client():
              app.config['TESTING'] = True
              with app.test_client() as client:
                  yield client
          
          def test_health_check(client):
              rv = client.get('/api/health')
              assert rv.status_code == 200
              assert b'healthy' in rv.data
          
          def test_triangulate_endpoint(client):
              test_data = {
                  'points': [
                      {'lat': 52.5200, 'lng': 13.4050, 'distance': 1000},
                      {'lat': 52.5300, 'lng': 13.4150, 'distance': 1500},
                      {'lat': 52.5100, 'lng': 13.4250, 'distance': 800}
                  ]
              }
              rv = client.post('/api/triangulate', json=test_data)
              assert rv.status_code == 200
          EOF
          fi
          pytest --cov=. --cov-report=xml --cov-report=html
      
      - name: üìä Upload Backend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # =============================================================================
  # DOCKER BUILD & SECURITY SCAN
  # =============================================================================
  docker-build:
    name: üê≥ Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: üîê Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üìä Extract Metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: üìä Extract Metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
<<<<<<< HEAD
      - name: üèßÔ∏è Build Frontend Image
=======
      - name: üèóÔ∏è Build Frontend Image
>>>>>>> 4a542fb (f)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
<<<<<<< HEAD
      - name: üèßÔ∏è Build Backend Image
=======
      - name: üèóÔ∏è Build Backend Image
>>>>>>> 4a542fb (f)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: üîç Run Trivy Vulnerability Scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
      
      - name: üîç Run Trivy Vulnerability Scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
      
      - name: üìã Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'
      
      - name: üìã Upload Trivy Scan Results (Backend)
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-test:
    name: üß™ Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üê≥ Start Application Stack
        run: |
          # Verwende die gebauten Images aus der Registry
          export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
          export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest"
          
          # Starte mit docker-compose
          docker-compose up -d
          
          # Warte auf Services
          echo "Warte auf Services..."
          sleep 30
      
      - name: üîç Health Checks
        run: |
          # Frontend Health Check
          curl -f http://localhost:3000/health || exit 1
          echo "‚úÖ Frontend healthy"
          
          # Backend Health Check
          curl -f http://localhost:5000/api/health || exit 1
          echo "‚úÖ Backend healthy"
      
      - name: üß™ API Integration Tests
        run: |
          # Test Triangulation API
          RESPONSE=$(curl -s -X POST http://localhost:5000/api/triangulate \
            -H "Content-Type: application/json" \
            -d '{
              "points": [
                {"lat": 52.5200, "lng": 13.4050, "distance": 1000},
                {"lat": 52.5300, "lng": 13.4150, "distance": 1500},
                {"lat": 52.5100, "lng": 13.4250, "distance": 800}
              ]
            }')
          
          # Check if response contains expected fields
          echo "$RESPONSE" | jq -e '.lat and .lng and .accuracy' || exit 1
          echo "‚úÖ Triangulation API working"
      
<<<<<<< HEAD
      - name: üß© Cleanup
=======
      - name: üßπ Cleanup
>>>>>>> 4a542fb (f)
        if: always()
        run: docker-compose down -v

  # =============================================================================
<<<<<<< HEAD
  # RENDER.COM DEPLOYMENT NOTIFICATION
  # =============================================================================
  notify-render:
    name: üåê Notify Render.com
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: üöÄ Deployment Success
        run: |
          echo "üéâ GitHub CI/CD Pipeline erfolgreich!"
          echo ""
          echo "üåê Render.com Deployment:"
          echo "Frontend: https://triangulation-frontend.onrender.com"
          echo "Backend:  https://triangulation-backend.onrender.com"
          echo ""
          echo "üìä Features verf√ºgbar:"
          echo "- üéØ Triangulation mit Drag & Drop"
          echo "- üìç GPS-Integration"
          echo "- üì± Mobile-optimiert"
          echo "- üîß Genauigkeitseinstellungen"
=======
  # DEPLOYMENT
  # =============================================================================
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
      
      - name: üöÄ Deploy to Production
        run: |
          echo "üöÄ Deployment w√ºrde hier stattfinden..."
          echo "Beispiele:"
          echo "- Deploy zu AWS ECS"
          echo "- Deploy zu Google Cloud Run"
          echo "- Deploy zu DigitalOcean App Platform"
          echo "- Deploy zu eigenem Kubernetes Cluster"
          
          # Beispiel f√ºr Webhook-basiertes Deployment:
          # curl -X POST ${{ secrets.DEPLOYMENT_WEBHOOK_URL }} \
          #   -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_TOKEN }}" \
          #   -d '{"version": "${{ github.sha }}"}'

  # =============================================================================
  # RELEASE MANAGEMENT
  # =============================================================================
  release:
    name: üì¶ Create Release
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üìù Generate Changelog
        id: changelog
        run: |
          # Einfache Changelog-Generierung
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi
          
          # Escape newlines f√ºr GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: üè∑Ô∏è Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: üéØ Triangulation App ${{ github.ref_name }}
          body: |
            ## üéØ Triangulation App ${{ github.ref_name }}
            
            ### üöÄ Features in dieser Version:
            - ‚úÖ Drag & Drop f√ºr Referenzpunkte
            - ‚úÖ Entfernungsbearbeitung (Inline-Edit)
            - ‚úÖ Genauigkeitseinstellungen (0-2km)
            - ‚úÖ GPS-Integration
            - ‚úÖ Erweiterte Projektverwaltung
            - ‚úÖ Mobile Optimierung
            - üê≥ Docker Containerisierung
            - üöÄ GitHub Actions CI/CD
            
            ### üìù Changelog:
            ${{ steps.changelog.outputs.changelog }}
            
            ### üê≥ Docker Images:
            - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}`
            - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}`
            
            ### üöÄ Schnellstart:
            ```bash
            docker run -d -p 3000:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}
            docker run -d -p 5000:5000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}
            ```
          draft: false
          prerelease: false

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  notify:
    name: üì¢ Notify Team
    runs-on: ubuntu-latest
    needs: [deploy, release]
    if: always()
    
    steps:
      - name: üì¢ Success Notification
        if: needs.deploy.result == 'success' || needs.release.result == 'success'
        run: |
          echo "üéâ Deployment/Release erfolgreich!"
          # Hier k√∂nntest Du Slack/Discord/Teams Notifications senden
          
      - name: ‚ùå Failure Notification
        if: needs.deploy.result == 'failure' || needs.release.result == 'failure'
        run: |
          echo "‚ùå Deployment/Release fehlgeschlagen!"
          # Hier k√∂nntest Du Fehler-Notifications senden
>>>>>>> 4a542fb (f)
