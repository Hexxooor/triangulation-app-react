# üê≥ Docker Compose - Triangulation App Development
# Optimiert f√ºr schnelle Entwicklung mit Hot Reload

version: '3.8'

services:
  # Frontend Service (React Development Server)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: triangulation-frontend-dev
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - REACT_APP_API_URL=http://localhost:5000
      - FAST_REFRESH=true
    volumes:
      # Live code reload f√ºr Development
      - ./frontend/src:/app/src:cached
      - ./frontend/public:/app/public:cached
      - ./frontend/package.json:/app/package.json:cached
      - ./frontend/package-lock.json:/app/package-lock.json:cached
      # Exclude node_modules f√ºr Performance
      - frontend-node-modules:/app/node_modules
    networks:
      - triangulation-dev-network
    stdin_open: true
    tty: true
    command: npm start
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend Service (Flask Development Server)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: triangulation-backend-dev
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - FLASK_APP=app.py
    volumes:
      # Live code reload f√ºr Development
      - ./backend:/app:cached
      # Exclude virtual environment
      - backend-venv:/app/venv
    networks:
      - triangulation-dev-network
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/api/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Development Database (SQLite f√ºr einfache Entwicklung)
  # Optional: Verwende Redis f√ºr erweiterte Funktionen
  redis-dev:
    image: redis:7-alpine
    container_name: triangulation-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - triangulation-dev-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test Runner (f√ºr automatisierte Tests)
  test-runner:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: triangulation-test-runner
    environment:
      - CI=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app:cached
      - frontend-node-modules:/app/node_modules
    networks:
      - triangulation-dev-network
    command: npm test -- --coverage --watchAll=false
    profiles:
      - test

# Networks
networks:
  triangulation-dev-network:
    driver: bridge
    name: triangulation-dev-network

# Development Volumes
volumes:
  frontend-node-modules:
    name: triangulation-frontend-node-modules
  backend-venv:
    name: triangulation-backend-venv
  redis-dev-data:
    name: triangulation-redis-dev-data